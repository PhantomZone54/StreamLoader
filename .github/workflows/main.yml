name: 9anime R3NCOD3R

on:
  workflow_dispatch:
    inputs:
      InputMediaURL:
        description: "Stream m3u8 Playlist URL"
        required: true
        default: ""
        type: string
      AnimeName:
        description: "Pretty Name of the Anime"
        required: true
        default: ""
        type: string
      Episode:
        description: "Episode Number, %02d"
        required: true
        default: ""
        type: number
      AudLang:
        description: "Anime Lang, en/ja"
        required: true
        default: "en"
        type: choice
        options:
        - ja
        - en
      SpeedProf:
        description: "AV1 SpeedProfile"
        required: true
        default: "2"
        type: choice
        options:
        - "1"
        - "2"
        - "3"

env:
  LocationOnIndex: "td:/9animeStreamZ"
  InputMediaURL: ${{ github.event.inputs.InputMediaURL }}
  AnimeName: ${{ github.event.inputs.AnimeName }}
  Episode: ${{ github.event.inputs.Episode }}
  AudLang: ${{ github.event.inputs.AudLang }}
  SpeedProf: ${{ github.event.inputs.SpeedProf }}
  QScale: "32"
  RCLONE_CONFIG_URL: ${{ secrets.RCLONE_CONFIG_URL }}
  RCLONE_INSTALL_MIRROR: ${{ secrets.RCLONE_INSTALL_MIRROR }}
  FTOOL_ARC_URL: ${{ secrets.FTOOL_ARC_URL }}
  FTOOL_CONVERTER: ${{ secrets.FTOOL_CONVERTER }}
  FTOOL_PROBER: ${{ secrets.FTOOL_PROBER }}

jobs:
  transload:
    runs-on: ubuntu-latest

    outputs:
      ChunkDir: ${{ steps.set-params.outputs.ChunkDir }}
      ChunkEncDir: ${{ steps.set-params.outputs.ChunkEncDir }}
      AudioType: ${{ steps.set-params.outputs.AudioType }}
      FrameRate: ${{ steps.set-params.outputs.FrameRate }}
      matrix: ${{ steps.set-params.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Tools
        run: |
          bash ./EncToolsChunkManager.sh
          bash ./EncToolsDLoader.sh
          bash ./EncToolsR3ncod3r.sh
      - name: Upload EncTools as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ftool
          path: /usr/local/bin/ff*
      - name: "Anime Transload Job - ${{env.AnimeName}} - Episode ${{env.Episode}}"
        run: |
          bash ./transload-n-chunk.sh
      - name: Prepare Matrix
        id: set-params
        run: |
          echo "::set-output name=ChunkDir::${ChunkDir}"
          echo "::set-output name=ChunkEncDir::${ChunkEncDir}"
          echo "::set-output name=AudioType::${AudioType}"
          echo "::set-output name=FrameRate::${FrameRate}"
          export input_matrix=$(for i in $(seq -w 01 ${Chunks}); do
            printf "\"%s\"," "${i}"
          done)
          export matrix=[${input_matrix%,*}]
          echo "::set-output name=matrix::${matrix}"
          echo ${{ steps.set-params.outputs.matrix }}

  av1cod3r:

    runs-on: ubuntu-latest
    needs: transload

    strategy:
      fail-fast: true
      max-parallel: 6
      matrix:
        ChunkNum: ${{fromJson(needs.transload.outputs.matrix)}}

    env:
      ChunkNum: ${{ matrix.ChunkNum }}

    steps:
      - uses: actions/checkout@v2
      - name: Download EncTools from Artifact
        uses: actions/download-artifact@v2
        with:
          name: ftool
          path: /usr/local/bin/
      - name: EncTool Preparation
        run: |
          bash ./EncToolsDLoader.sh
          sudo chmod a+x /usr/local/bin/ff*
      - name: "Anime R3NCOD3R Job - ${{env.AnimeName}} Ep_${{env.Episode}} part_${{env.ChunkNum}}"
        env:
          ChunkDir: ${{ needs.transload.outputs.ChunkDir }}
          ChunkEncDir: ${{ needs.transload.outputs.ChunkEncDir }}
          AudioType: ${{ needs.transload.outputs.AudioType }}
          FrameRate: ${{ needs.transload.outputs.FrameRate }}
        run: |
          bash ./av1-encoder.sh

  av1merger:

    runs-on: ubuntu-latest
    needs: [transload, av1cod3r]

    steps:
      - uses: actions/checkout@v2
      - name: Download EncTools from Artifact
        uses: actions/download-artifact@v2
        with:
          name: ftool
          path: /usr/local/bin/
      - name: EncTool Preparation
        run: |
          bash ./EncToolsChunkManager.sh
          bash ./EncToolsDLoader.sh
          sudo chmod a+x /usr/local/bin/ff*
      - name: "Anime Merger Job - ${{env.AnimeName}} - Episode ${{env.Episode}}"
        env:
          ChunkDir: ${{ needs.transload.outputs.ChunkDir }}
          ChunkEncDir: ${{ needs.transload.outputs.ChunkEncDir }}
          AudioType: ${{ needs.transload.outputs.AudioType }}
        run: |
          bash ./av1-merger.sh
